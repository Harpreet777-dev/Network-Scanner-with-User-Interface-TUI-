#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ncurses.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include  
 <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>

// Function to scan the network using ping
void scan_network(char *start_ip, char *end_ip, struct hostent **hosts) {
    int status;
    char command[100];

    for (int i = 0; i <= 255; i++) {
        sprintf(command, "ping -c 1 %s.%d", start_ip, i);
        status = system(command);

        if (status == 0) {
            struct in_addr inaddr;
            inet_aton(hosts[i]->h_addr_list[0], &inaddr);
            char *ip_str = inet_ntoa(inaddr);

            // Add the host to the list of active hosts
            // ... (implementation omitted for brevity)
        }
    }
}

// Function to display the scan results in a TUI
void display_results(struct hostent **hosts, int num_hosts) {
    initscr();
    noecho();
    cbreak();

    // Clear the screen and display the results
    clear();
    mvprintw(0, 0, "Active Hosts:");
    for (int i = 0; i < num_hosts; i++) {
        mvprintw(i + 1, 0, "%s", hosts[i]->h_name);
    }

    refresh();
    getch();
    endwin();
}

int main() {
    char start_ip[15], end_ip[15];
    struct hostent *hosts[256];

    // Get the IP address range from the user
    printf("Enter the starting IP address: ");
    scanf("%s", start_ip);
    printf("Enter the ending IP address: ");
    scanf("%s", end_ip);

    // Resolve the IP addresses to hostnames
    for (int i = 0; i <= 255; i++) {
        char ip[27]; // Increased buffer size to 27
        sprintf(ip, "%s.%d", start_ip, i);
        hosts[i] = gethostbyname(ip);
    }

    // Scan the network and display the results
    scan_network(start_ip, end_ip, hosts);
    display_results(hosts, 256);

    return 0;
}
